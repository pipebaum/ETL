Linux Server Setup
1) Install OpenSSH
	sudo apt-get install openssh
	- remove root access over openSSH
	cd /etc/ssh
	ls
	sudo cp sshd_config sshd_config.factory-defaults
	sudo chmod a-w /etc/ssh/sshd_config.factory-defaults
	sudo vi /etc/ssh/sshd_config
	 change: PermitRootLogin yes to PermitRootLogin no

2) Install x11vnc 
		sudo apt-get install x11vnc
		sudo x11vnc -storepasswd /etc/x11vnc.pass
		sudo chmod 600 /etc/x11vnc.pass
		create a file in /etc/init
		sudo vi /etc/init/x11vnc.conf
		put the following in there:
start on login-session-start
script
x11vnc -xkb -noxrecord -noxfixes -noxdamage -repeat -display :0 -auth /var/run/lightdm/root/:0 -forever -shared -bg -o /var/log/x11vnc.log -rfbauth /etc/x11vnc.pass -rfbport 5900 -allow 192.168.0.53
end script
	
		Run it this time, with: 
		sudo service x11vnc start 	
		
		From now on should always be running
		
		Also change the screen saver, seems to lockup and cause some strange behavior
		sudo apt-get purge light-locker
		sudo apt-get install xscreensaver

3) Download and install mysql server
		sudo apt-get install mysql-server-5.6
		
		Move the location of the databases to a new location
		sudo stop mysql
		sudo cp -rap /var/lib/mysql /etl/mysql
		sudo chown -R mysql:mysql /etl/mysql
		sudo cp /etc/mysql/my.cnf /etc/mysql/my.cnf.orig
		sudo vi /etc/mysql/my.cnf
		 change 
		 datadir         = /etl/mysql
		sudo cp /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/usr.sbin.mysqld.backup
		sudo vi /etc/apparmor.d/usr.sbin.mysqld
		 change
		 /var/lib/mysql to /etl/mysql in two places
		sudo /etc/init.d/apparmor restart

		sudo start mysql
		
		mysql -uroot -p to confirm that you can login.
		
		NOTE: To change password at command line, login and perform following
		use mysql;
		SET PASSWORD FOR 'root'@'localhost' = PASSWORD('new-password-here');
		
4) Get GIT
		sudo apt-get install git
		
5) Install Oracle JDK, I used JDK 8 and it worked well.
		sudo apt-add-repository ppa:webupd8team/java
		sudo apt-get update
		sudo apt-get install oracle-java8-installer		

6) Install Pentaho /opt/pentaho
		mkdir /opt/pentaho
		copy and unzip pentaho zip file into pdi directory.
		e.g. /opt/pentaho/data_integration
		go to the directory and run spoon.sh to confirm that it works

7) Create Pentaho user account
		sudo useradd -m -d /home/pentaho -s /bin/bash -c "pentaho service account" -U pentaho
		sudo passwd pentaho
		sudo adduser pentaho sudo    'add user to sudoer group
		sudo cp -r /home/root/.ssh ~/.
		sudo chown pentaho:pentaho .ssh
		login as the pentaho user
		
7b) Give ownership of the pentaho/data_integration directory to pentaho
		sudo chown -R pentaho:pentaho /opt/pentaho/data_integration
		
8a) Login as pentaho user for additional work
		su pentaho
		whoami   'to test that you are now logged in as pentaho

8b) Use GIT to Clone project into appropriate working directory
		Do this while user pentaho
		cd /etl/prod
		git clone "https://github.com/pipebaum/ETL.git"
		chmod pentaho:pentaho /etl/prod/ETL
		
		references to $ETL_HOME mean use /etl/prod/ETL
		
9) Setup kettle.properties

		cd ~
		mkdir ~/.kettle/
		cp /etl/prod/ETL/kettle.properties ~/.kettle/.
		vi ~/.kettle/kettle.properties
		search for any variables that start with SMP_ and change appropriately
		If no kettle.properties exists, create the file and add the following.
		
		At this time the configuration properties for PROD are: 
			SMP_AWS_HOST_IP=52.88.222.123
			SMP_AWS_HOST_PASSPHRASE=simplelabs
			SMP_AWS_HOST_USER=scottr
			SMP_AWS_PEM_FILE=/pdi/SMPLABS_AWSKeyPair.pem
			SMP_DB_USER=root
			SMP_ETL_HOME=/pdi/etl
			SMP_ETL_SCHEMA=smpetl
			
		One standard Kettle property will also need to be updated.
			KETTLE_SHARED_OBJECTS={$ETL_HOME}/dev_conn.xml  
		replace $ETL_HOME with the actual path and get rid of the brackets
		

9) Add .pem file to the location specified in  
		We need a .pem file in order to access our AWS instance. 
		All of the Kettle scripts that reference the .pem file use the SMP_AWS_PEM_FILE location specified in 
		step 7. You need to make sure that the file exists at this location.
		I recommend you use a fully qualified path and not a relative path e.g. 
		
		/home/pentaho/.kettle/something.pem 
		is better than
		~/.kettle/something.pem 
		
9b) Permissions on the file in .kettle should be restricted!
		chmod 600 ~/.kettle/*.*
	
10) The scripts use MySql local-path configurations to connect to MySQL
		info here: http://dev.mysql.com/doc/refman/5.6/en/mysql-config-editor.html
		MySQL has a utility that will allow you to build the required connections which are stored
		for any user that is calling the scripts. To run it simply enter the following at command line:
			mysql_config_editor set --login-path=local --host=localhost --user=root --password

		You can look at the local config file settings by running the following.
			mysql_config_editor print --all

		
		NOTE: For bulk load we are using the root user, since all access is local. 
		You may want to change to use a different user. If you do you will need to modify the database config files
		and the mysql-config-editor settings
		
11) Adjust the Kettle dev_conn.xml file.
		Kettle uses shared connections to access the databases when running scripts.
		This file is located in $ETL_HOME/dev_conn.xml (as adjusted in step 8)
		You will need to change the connection properties in this file to point to the appropriate location.
		
12) Validate that you have connectivity to the AWS Server
		ssh -i ~/SMPLABS_AWSKeyPair.pem 52.88.222.123
		You need to configure AWS to accept the pentaho user over SSH. 
		See Setup Instructions - AWS for instructions on how to do that.
		
13) XTerm Configuration
		On the production system there were some really ugly XTerm defaults. To avoid:
		Create a new file ~/.Xresources and add the following
			xterm*font: terminus-12
			xterm*boldFont: terminus-12
			xterm*loginShell: true
			xterm*vt100*geometry: 80x50
			xterm*saveLines: 2000
			xterm*charClass: 33:48,35:48,37:48,43:48,45-47:48,64:48,95:48,126:48
			xterm*termName: xterm-color
			xterm*eightBitInput: false
			xterm*foreground: rgb:a8/a8/a8
			xterm*background: rgb:00/00/00
			xterm*color0: rgb:00/00/00
			xterm*color1: rgb:a8/00/00
			xterm*color2: rgb:00/a8/00
			xterm*color3: rgb:a8/54/00
			xterm*color4: rgb:00/00/a8
			xterm*color5: rgb:a8/00/a8
			xterm*color6: rgb:00/a8/a8
			xterm*color7: rgb:a8/a8/a8
			xterm*color8: rgb:54/54/54
			xterm*color9: rgb:fc/54/54
			xterm*color10: rgb:54/fc/54
			xterm*color11: rgb:fc/fc/54
			xterm*color12: rgb:54/54/fc
			xterm*color13: rgb:fc/54/fc
			xterm*color14: rgb:54/fc/fc
			xterm*color15: rgb:fc/fc/fc
			xterm*boldMode: false
			xterm*colorBDMode: true
			xterm*colorBD: rgb:fc/fc/fc
		Save the file and run the following command.
		xrdb -merge ~/.Xresources
		
		Now close XTerm and re-open and you should have a better terminal window.